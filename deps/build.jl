using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libsymspg"], :libsymspg),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/unkcpz/SpglibBuilder/releases/download/v1.12.2b1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/SpglibBuilder.v1.12.2.i686-linux-gnu.tar.gz", "6755b21dd1d4290482fba60800bc5fbf7832efaf2b9a7339c2dd25d14c3c6d3e"),
    Windows(:i686) => ("$bin_prefix/SpglibBuilder.v1.12.2.i686-w64-mingw32.tar.gz", "36224e9c5cae19be1ac0b75e736c29f1bdb86bbcdee2313d2d2a873f4c0f7d10"),
    MacOS(:x86_64) => ("$bin_prefix/SpglibBuilder.v1.12.2.x86_64-apple-darwin14.tar.gz", "a07e651924cd7e9cfc268be7e4c9f15f65f90b9d9b8a3c8c84661b4994719a53"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/SpglibBuilder.v1.12.2.x86_64-linux-gnu.tar.gz", "247985db65dfab481b4567a7055219efed3072fa2f981b520ea6a04f5d3616b6"),
    FreeBSD(:x86_64) => ("$bin_prefix/SpglibBuilder.v1.12.2.x86_64-unknown-freebsd11.1.tar.gz", "66980e45c6b8a34c254a8c79c0b9a872c4cdc5810d1148fa1dfdc538558881e8"),
    Windows(:x86_64) => ("$bin_prefix/SpglibBuilder.v1.12.2.x86_64-w64-mingw32.tar.gz", "d79e5f2d02d5286fa26a1d6617b0c654c00ad02077e032b032ffdeb26823f3d6"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
